<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://daekyeongp.github.io/</id><title>Dekay 🏃</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-05-04T22:24:40+09:00</updated> <author> <name>DAEKYEONG PARK</name> <uri>https://daekyeongp.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://daekyeongp.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://daekyeongp.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 DAEKYEONG PARK </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>OpenCV - 33. 히스토그램</title><link href="https://daekyeongp.github.io/posts/opencv-33/" rel="alternate" type="text/html" title="OpenCV - 33. 히스토그램" /><published>2022-04-29T00:12:00+09:00</published> <updated>2022-04-29T00:12:00+09:00</updated> <id>https://daekyeongp.github.io/posts/opencv-33/</id> <content src="https://daekyeongp.github.io/posts/opencv-33/" /> <author> <name>DAEKYEONG PARK</name> </author> <category term="OpenCV" /> <summary> 히스토그램(Histogram) 히스토그램이란 도수 분포표 중 하나로 데이터의 분포를 몇 개의 구간으로 나누고 각 구간에 속하는 데이터를 시각적으로 표현한 막대그래프입니다. 이미지에서 사용하는 히스토그램은 X 축을 픽셀의 값으로 사용하고 Y 축을 해당 픽셀의 개수로 표현합니다. 이미지의 픽셀값을 히스토그램으로 표현하면 이미지의 특성을 쉽게 확인할 수 있습니다. 히스토그램은 다음과 같은 세 가지의 중요한 요소를 갖고 있습니다. 빈도 수(BINS): 히스토그램 그래프의 X 축 간격 차원 수(DIMS): 히스토그램을 분석할 이미지의 차원 범위(RANGE): 히스토그램 그래프의 X 축 범위 빈도 수는 히스토그램의 X 축 간격입니다. 픽셀값의 범위는 0~255로 총 256개의 ... </summary> </entry> <entry><title>OpenCV - 32. 비트 연산</title><link href="https://daekyeongp.github.io/posts/opencv-32/" rel="alternate" type="text/html" title="OpenCV - 32. 비트 연산" /><published>2022-04-29T00:12:00+09:00</published> <updated>2022-04-29T00:12:00+09:00</updated> <id>https://daekyeongp.github.io/posts/opencv-32/</id> <content src="https://daekyeongp.github.io/posts/opencv-32/" /> <author> <name>DAEKYEONG PARK</name> </author> <category term="OpenCV" /> <summary> 비트 연산(Bitwise) 비트 연산은 하나 또는 두 이미지에 대해 비트 연산을 수행합니다. Numpy 클래스의 비트 연산과 동일한 의미와 결과를 갖습니다. 또한, 비트 연산 표현(&amp;amp;, | 등)을 통해 Mat 클래스 간의 연산을 수행할 수 있습니다. 메인 코드 import numpy as np import cv2 src = cv2.imread("image/31.jpg") gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY) _, binary = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY) _and = cv2.bitwise_and(gray, binary) _or = cv2.bitwise_or(gray, bi... </summary> </entry> <entry><title>OpenCV - 31. 이미지 연산 - (2)</title><link href="https://daekyeongp.github.io/posts/opencv-31/" rel="alternate" type="text/html" title="OpenCV - 31. 이미지 연산 - (2)" /><published>2022-04-28T00:12:00+09:00</published> <updated>2022-04-28T00:12:00+09:00</updated> <id>https://daekyeongp.github.io/posts/opencv-31/</id> <content src="https://daekyeongp.github.io/posts/opencv-31/" /> <author> <name>DAEKYEONG PARK</name> </author> <category term="OpenCV" /> <summary> 이미지 연산(Image Calculation) 이미지 연산은 하나 또는 둘 이상의 이미지에 대해 수학적인 연산을 수행합니다. Numpy 클래스의 배열 연산과 동일하거나 비슷한 의미와 결과를 갖습니다. 또한, 대수적 표현(+, - 등)을 통해 Mat 클래스 간의 연산을 수행할 수 있습니다. 메인 코드 import numpy as np import cv2 src = cv2.imread("image/29.jpg") number = np.ones_like(src) * 127 _max = cv2.max(src, number) _min = cv2.min(src, number) _abs = cv2.absdiff(src, number) compare = cv2.compare(src, number... </summary> </entry> <entry><title>OpenCV - 30. 이미지 연산 - (1)</title><link href="https://daekyeongp.github.io/posts/opencv-30/" rel="alternate" type="text/html" title="OpenCV - 30. 이미지 연산 - (1)" /><published>2022-04-27T00:12:00+09:00</published> <updated>2022-04-27T00:12:00+09:00</updated> <id>https://daekyeongp.github.io/posts/opencv-30/</id> <content src="https://daekyeongp.github.io/posts/opencv-30/" /> <author> <name>DAEKYEONG PARK</name> </author> <category term="OpenCV" /> <summary> 이미지 연산(Image Calculation) 이미지 연산은 하나 또는 둘 이상의 이미지에 대해 수학적인 연산을 수행합니다. Numpy 클래스의 배열 연산과 동일하거나 비슷한 의미와 결과를 갖습니다. 또한, 대수적 표현(+, - 등)을 통해 Mat 클래스 간의 연산을 수행할 수 있습니다. 메인 코드 import numpy as np import cv2 src = cv2.imread("image/29.jpg") number1 = np.ones_like(src) * 127 number2 = np.ones_like(src) * 2 add = cv2.add(src, number1) sub = cv2.subtract(src, number1) mul = cv2.multiply(src, num... </summary> </entry> <entry><title>OpenCV - 29. 원 검출</title><link href="https://daekyeongp.github.io/posts/opencv-29/" rel="alternate" type="text/html" title="OpenCV - 29. 원 검출" /><published>2022-04-26T00:12:00+09:00</published> <updated>2022-04-26T00:12:00+09:00</updated> <id>https://daekyeongp.github.io/posts/opencv-29/</id> <content src="https://daekyeongp.github.io/posts/opencv-29/" /> <author> <name>DAEKYEONG PARK</name> </author> <category term="OpenCV" /> <summary> 원 검출(Circle Detection) 원 검출 알고리즘도 허프 변환 알고리즘 중 하나인 허프 원 변환(Hough Circle Transform) 알고리즘을 활용해 원을 검출합니다. 허프 원 변환 알고리즘은 앞서 배운 허프 선 변환 알고리즘과 비슷한 방식으로 동작합니다. 허프 원 변환 알고리즘은 2차원이 아닌 3차원 누산 평면으로 검출합니다. 각 차원은 원의 중심점 x, 원의 중심점 y, 원의 반경 r을 활용해 누산 평면을 구성합니다. 누산 평면은 2차원 공간(x, y)에서 3차원 공간(a, b, r)으로 변환됩니다. 허프 원 변환의 동작 방식은 이미지에서 가장자리를 검출합니다. 3차원 히스토그램에서 돗수가 높은 (a, b, r)을 선택합니다. 하지만, 이 방법은 이미지에서 가... </summary> </entry> </feed>
